// SPDX-License-Identifier: UNLICENSED
// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.8.0. SEE SOURCE BELOW. !!
pragma solidity ^0.8.20;

interface ISlayer {
 error AddressEmptyCode(address target);
    error ERC1967InvalidImplementation(address implementation);
    error ERC1967NonPayable();
    error ERC20InsufficientAllowance(
        address spender,
        uint256 allowance,
        uint256 needed
    );
    error ERC20InsufficientBalance(
        address sender,
        uint256 balance,
        uint256 needed
    );
    error ERC20InvalidApprover(address approver);
    error ERC20InvalidReceiver(address receiver);
    error ERC20InvalidSender(address sender);
    error ERC20InvalidSpender(address spender);
    error EnforcedPause();
    error ExpectedPause();
    error FailedInnerCall();
    error InvalidInitialization();
    error NotInitializing();
    error OwnableInvalidOwner(address owner);
    error OwnableUnauthorizedAccount(address account);
    error ReentrancyGuardReentrantCall();
    error UUPSUnauthorizedCallContext();
    error UUPSUnsupportedProxiableUUID(bytes32 slot);
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
    event Initialized(uint64 version);
    event MintRedeemAction(
        address user,
        bool isMint,
        supportingMainContractSlayer.MintTemp tmpDataMint,
        supportingMainContractSlayer.MintTempOut resultsMint,
        supportingMainContractSlayer.RedeemTemp tmpDataRedeem,
        supportingMainContractSlayer.RedeemTempOut resultsRedeem
    );
    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );
    event Paused(address account);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Unpaused(address account);
    event Upgraded(address indexed implementation);

    function BASIS_POINTS() external view returns (uint256);

    function LPPool() external view returns (uint256);

    function UPGRADE_INTERFACE_VERSION() external view returns (string memory);

    function allowance(address owner, address spender)
        external
        view
        returns (uint256);

    function alternateRedeemReservePoolFee() external view returns (uint256);

    function alternateRedeemTreasuryFee() external view returns (uint256);

    function amountLeftForTheNextStep() external view returns (uint256);

    function approve(address spender, uint256 value) external returns (bool);

    function balanceOf(address account) external view returns (uint256);

    function burn(uint256 value) external;

    function burnFrom(address account, uint256 value) external;

    function currencyToken() external view returns (address);

    function currentRange() external view returns (uint256);

    function customPause() external;

    function customPaused() external view returns (bool);

    function customUnPause() external;

    function decimals() external view returns (uint8);

    function discountWallets(address) external view returns (uint256);

    function executeClaminity() external;

    function getAllValues()
        external
        view
        returns (
            uint256 _tokenPrice,
            uint256 _amountLeftForTheNextStep,
            uint256 _currentRange,
            uint256 lpAmount,
            uint256 currentSupply
        );

    function getMap(uint256 index)
        external
        view
        returns (SlayerHeaven.Range memory);

    function getTokenHistory(uint256 start, uint256 end)
        external
        view
        returns (SlayerHeaven.tokenPriceHistory[] memory);

    function getTotalTax(bool isMint, bool alternateRedeemShadow)
        external
        view
        returns (uint256 tax);

    function initialize() external;

    function mint(address to, uint256 amount) external;

    function mintFee() external view returns (uint256);

    function mintReservePoolFee() external view returns (uint256);

    function mintToken(
        supportingMainContractSlayer.MintTemp memory tmpData,
        uint256 minOut
    ) external payable;

    function mintTreasuryFee() external view returns (uint256);

    function name() external view returns (string memory);

    function owner() external view returns (address);

    function pause() external;

    function paused() external view returns (bool);

    function priceHistoryCounter() external view returns (uint256);

    function priceRanges(uint256)
        external
        view
        returns (
            uint256 minPrice,
            uint256 maxPrice,
            uint256 rangeSupply,
            uint256 incrementalStep
        );

    function proxiableUUID() external view returns (bytes32);

    function redeemFee() external view returns (uint256);

    function redeemReservePoolFee() external view returns (uint256);

    function redeemToken(
        supportingMainContractSlayer.RedeemTemp memory tmpData,
        uint256 minOut
    ) external payable;

    function redeemTreasuryFee() external view returns (uint256);

    function renounceOwnership() external;

    function setAmountLeftNext(uint256 amountNext) external;

    function setCurrencyToken(address _currencyToken) external;

    function setExtraContracts(address _supportive, address _shadowSlayer)
        external;

    function setMintFees(uint256 _mintReservePoolFee, uint256 _mintTreasuryFee)
        external;

    function setMintRedeemFee(uint256 _mintFee, uint256 _redeemFee) external;

    function setRedeemFees(
        uint256 _redeemReservePoolFee,
        uint256 _redeemTreasuryFee
    ) external;

    function setTreasuryWallet(address _treasuryWallet) external;

    function setWalletDiscounts(address _address, uint256 _multiplier) external;

    function shadowSlayerToken() external view returns (address);

    function supportingCont() external view returns (address);

    function symbol() external view returns (string memory);

    function sync() external;

    function tokenHistory(uint256)
        external
        view
        returns (
            bool isMint,
            uint256 price,
            uint256 timestamp,
            uint256 blockNo,
            address userAddress,
            uint256 amount
        );

    function tokenPrice() external view returns (uint256);

    function totalRangeCount() external view returns (uint256);

    function totalSupply() external view returns (uint256);

    function transfer(address to, uint256 value) external returns (bool);

    function transferFrom(
        address from,
        address to,
        uint256 value
    ) external returns (bool);

    function transferOwnership(address newOwner) external;

    function unpause() external;

    function upgradeToAndCall(address newImplementation, bytes memory data)
        external
        payable;

    function withdrawFundsERC20(address erc20, uint256 amount) external;

    function withdrawFundsNative(uint256 amount) external;

    receive() external payable;
}

interface supportingMainContractSlayer {
    struct MintTemp {
        uint256 amount;
        uint256 _tokenPrice;
        uint256 _amountLeftForTheNextStep;
        uint256 _currentRange;
        uint256 mintCount;
        uint256 chargeAmount;
        uint256 taxAmount;
        uint256 lpAmount;
        uint256 totalSupply;
        uint256 discountType;
    }

    struct MintTempOut {
        uint256 amountToBeCharged;
        uint256 amountToMint;
        uint256 tax;
        uint256 amountLeftForNext;
        uint256 currentRangeResult;
        uint256 newPrice;
        uint256 newLpAmount;
        uint256 newTotalSupply;
    }

    struct RedeemTemp {
        uint256 amount;
        uint256 _tokenPrice;
        uint256 _amountLeftForTheNextStep;
        uint256 _currentRange;
        uint256 burnCount;
        uint256 chargeAmount;
        uint256 taxAmount;
        uint256 lpAmount;
        uint256 totalSupply;
        bool mintShadowSlayerToken;
        uint256 discountType;
    }

    struct RedeemTempOut {
        uint256 amountToBeCharged;
        uint256 amountToBurn;
        uint256 tax;
        uint256 amountLeftForNext;
        uint256 currentRangeResult;
        uint256 newPrice;
        uint256 newLpAmount;
        uint256 newTotalSupply;
    }
}

interface SlayerHeaven {
    struct Range {
        uint256 minPrice;
        uint256 maxPrice;
        uint256 rangeSupply;
        uint256 incrementalStep;
    }

    struct tokenPriceHistory {
        bool isMint;
        uint256 price;
        uint256 timestamp;
        uint256 blockNo;
        address userAddress;
        uint256 amount;
    }
}